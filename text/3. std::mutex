Класс std::mutex - это примитив синхронизации, который может использоваться для защиты общих данных от одновременного доступа нескольких потоков.

# std::mutex предлагает эксклюзивную, нерекурсивную семантику владения:

# Вызывающий поток владеет мьютексом с момента успешного вызова методов lock или try_lock до вызова unlock.

# Когда поток владеет мьютексом, все остальные потоки блокируются (при вызове lock) или получают false (при вызове try_lock), если они пытаются претендовать на владение мьютексом.

# Вызывающий поток не должен владеть мьютексом до вызова lock или try_lock.

# Поведение программы не определено, если мьютекс уничтожается, все еще будучи заблокированным, или если поток завершается, не разблокировав мьютекс.

# std::mutex не является ни копируемым, ни перемещаемым.

# Если метод lock вызывается потоком, который уже владеет мьютексом, поведение не определено: например, программа может попасть в deadlock.

# Метод try_lock может ошибаться и возвращать false, даже если мьютекс в данный момент не заблокирован никаким другим потоком.

# Если try_lock вызывается потоком, который уже владеет мьютексом, поведение не определено.

# Используется как правило с lock_guard
 void save_page(const std::string &url)
 {
     // simulate a long page fetch
     std::this_thread::sleep_for(std::chrono::seconds(2));
     std::string result = "fake content";
  
     std::lock_guard<std::mutex> guard(g_pages_mutex);
     g_pages[url] = result;
 }

 